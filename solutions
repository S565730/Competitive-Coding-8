##PROBLEM1
class Solution {
    public String minWindow(String s, String t) {
        if (s.length() < t.length()) return "";

        // Character frequency map for t
        HashMap<Character, Integer> tMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        }

        int left = 0, right = 0, minLen = Integer.MAX_VALUE;
        int start = 0, matched = 0;
        HashMap<Character, Integer> windowMap = new HashMap<>();

        while (right < s.length()) {
            char rightChar = s.charAt(right);
            windowMap.put(rightChar, windowMap.getOrDefault(rightChar, 0) + 1);

            // Check if character contributes to a valid match
            if (tMap.containsKey(rightChar) && windowMap.get(rightChar).intValue() == tMap.get(rightChar).intValue()) {
                matched++;
            }

            // Try to shrink the window
            while (matched == tMap.size()) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    start = left;
                }

                char leftChar = s.charAt(left);
                windowMap.put(leftChar, windowMap.get(leftChar) - 1);
                if (tMap.containsKey(leftChar) && windowMap.get(leftChar) < tMap.get(leftChar)) {
                    matched--;
                }
                left++;
            }

            right++; // Expand the window
        }

        return minLen == Integer.MAX_VALUE ? "" : s.substring(start, start + minLen);
    }
}

##PROBLEM2

class Solution {

    public void flatten(TreeNode root) {

        if(root==null || root.left==null && root.right==null)

            return;

        if(root.left!=null)

        {

            flatten(root.left);

            TreeNode tempright=root.right;

            root.right=root.left;

            root.left=null;

            while(root.right!=null) root=root.right;

            root.right=tempright;

        }

        flatten(root.right);

    }

}